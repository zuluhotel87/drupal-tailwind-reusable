((Drupal,once)=>{const intervals={year:31536000,month:2592000,week:604800,day:86400,hour:3600,minute:60,second:1,};const intervalsNames=Object.keys(intervals);const timers=new WeakMap();Drupal.timeDiff={show(timeElement){const timestamp=new Date(timeElement.getAttribute('datetime'),).getTime();const timeDiffSettings=JSON.parse(timeElement.getAttribute('data-drupal-time-diff'),);const now=Date.now();const diff=Math.round((timestamp-now)/1000);const options={granularity:timeDiffSettings.granularity};const timeDiff=Drupal.timeDiff.format(diff,options);const format=diff>0?'future':'past';timeElement.textContent=Drupal.formatString(timeDiffSettings.format[format],{'@interval':timeDiff.formatted,},);if(timeDiffSettings.refresh>0){const refreshInterval=Drupal.timeDiff.refreshInterval(timeDiff.value,timeDiffSettings.refresh,timeDiffSettings.granularity,);clearTimeout(timers.get(timeElement));timers.set(timeElement,setTimeout(Drupal.timeDiff.show,refreshInterval*1000,timeElement),)}},refreshInterval(value,refresh,granularity){const units=Object.keys(value);const unitsCount=units.length;const lastUnit=units.pop();if(lastUnit!=='second'){if(unitsCount===granularity){intervalsNames.every((interval)=>{const duration=intervals[interval];if(interval===lastUnit){refresh=refresh<duration?duration:refresh;return!1}
return!0});return refresh}
const lastIntervalIndex=intervalsNames.indexOf(lastUnit);const nextInterval=intervalsNames[lastIntervalIndex+1];refresh=intervals[nextInterval]}
return refresh},format(diff,options={}){options={granularity:2,strict:!1,...options};if(options.strict&&diff<0){return{formatted:Drupal.formatPlural(0,'1 second','@count seconds'),value:{second:0},}}
diff=Math.abs(diff);const output=[];const value={};let units;let{granularity}=options;intervalsNames.every((interval)=>{const duration=intervals[interval];units=Math.floor(diff/duration);if(units>0){diff%=units*duration;switch(interval){case 'year':output.push(Drupal.formatPlural(units,'1 year','@count years'));break;case 'month':output.push(Drupal.formatPlural(units,'1 month','@count months'),);break;case 'week':output.push(Drupal.formatPlural(units,'1 week','@count weeks'));break;case 'day':output.push(Drupal.formatPlural(units,'1 day','@count days'));break;case 'hour':output.push(Drupal.formatPlural(units,'1 hour','@count hours'));break;case 'minute':output.push(Drupal.formatPlural(units,'1 minute','@count minutes'),);break;default:output.push(Drupal.formatPlural(units,'1 second','@count seconds'),)}
value[interval]=units;granularity-=1;if(granularity<=0){return!1}}else if(output.length>0){return!1}
return!0});if(output.length===0){return{formatted:Drupal.formatPlural(0,'1 second','@count seconds'),value:{second:0},}}
return{formatted:output.join(' '),value}},};Drupal.behaviors.timeDiff={attach(context){once('time-diff','time[data-drupal-time-diff]',context).forEach(Drupal.timeDiff.show,)},detach(context,settings,trigger){if(trigger==='unload'){once.remove('time-diff','time[data-drupal-time-diff]',context).forEach((timeElement)=>clearTimeout(timers.get(timeElement)))}},}})(Drupal,once)