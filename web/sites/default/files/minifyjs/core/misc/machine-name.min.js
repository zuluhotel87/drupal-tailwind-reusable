(function($,Drupal,drupalSettings,transliterateLibrary){const trimByChar=(string,character)=>{const first=[...string].findIndex((char)=>char!==character);const last=[...string].reverse().findIndex((char)=>char!==character);return string.substring(first,string.length-last)};const prepareMachineName=(source,settings)=>{const rx=new RegExp(settings.replace_pattern,'g');return trimByChar(source.toLowerCase().replace(rx,settings.replace).substring(0,settings.maxlength),settings.replace,)};Drupal.behaviors.machineName={attach(context,settings){const self=this;const $context=$(context);function clickEditHandler(e){const data=e.data;data.$wrapper.removeClass('hidden');if(data.$target.attr('data-machine-name-require-when-visible')){data.$target.attr('required',!0).removeAttr('data-machine-name-require-when-visible')}
data.$target.trigger('focus');data.$suffix.hide();data.$source.off('.machineName')}
function machineNameHandler(e){const data=e.data;const options=data.options;const baseValue=e.target.value;const needsTransliteration=!/^[A-Za-z0-9_\s]*$/.test(baseValue);if(needsTransliteration){self.showMachineName(self.transliterate(baseValue,options),data)}else{self.showMachineName(prepareMachineName(baseValue,options),data)}}
Object.keys(settings.machineName).forEach((sourceId)=>{const options=settings.machineName[sourceId];const $source=$(once('machine-name',$context.find(sourceId).addClass('machine-name-source'),),);const $target=$context.find(options.target).addClass('machine-name-target');const $suffix=$context.find(options.suffix);const $wrapper=$target.closest('.js-form-item');if(!$source.length||!$target.length||!$suffix.length||!$wrapper.length){return}
if($target.hasClass('error')&&$target[0].value&&$target[0].value.trim().length){return}
options.maxlength=$target.attr('maxlength');$wrapper.addClass('hidden');if($target.attr('required')){$target.removeAttr('required').attr('data-machine-name-require-when-visible')}
const machine=$target[0].value;const $preview=$(`<span class="machine-name-value">${
            options.field_prefix
          }${Drupal.checkPlain(machine)}${options.field_suffix}</span>`,);$suffix.empty();if(options.label){$suffix.append(`<span class="machine-name-label">${options.label}: </span>`,)}
$suffix.append($preview);if($target[0].disabled){return}
const eventData={$source,$target,$suffix,$wrapper,$preview,options,};if(machine===''&&$source[0].value!==''){if(/^[A-Za-z0-9_\s]*$/.test($source[0].value)){self.showMachineName(prepareMachineName($source[0].value,options),eventData,)}else{self.showMachineName(machine,eventData)}}
const $link=$('<span class="admin-link"><button type="button" class="link" aria-label="'.concat(Drupal.t('Edit machine name'),'" data-drupal-selector="'.concat($target.data('drupal-selector'),),'-machine-name-admin-link">',).concat(Drupal.t('Edit'),'</button></span>'),).on('click',eventData,clickEditHandler).on('keyup',(e)=>{if(e.key==='Enter'||eventData.code==='Space'){e.preventDefault();e.stopImmediatePropagation();e.target.click()}}).on('keydown',(e)=>{if(e.key==='Enter'||eventData.code==='Space'){e.preventDefault()}});$suffix.append($link);if($target[0].value===''){$source.on('change.machineName input.machineName',eventData,machineNameHandler,).trigger('change.machineName')}})},showMachineName(machine,data){const settings=data.options;if(machine!==''){if(machine!==settings.replace){data.$target[0].value=machine;data.$preview.html(settings.field_prefix+Drupal.checkPlain(machine)+settings.field_suffix,)}
data.$suffix.show()}else{data.$suffix.hide();data.$target[0].value=machine;data.$preview.empty()}},transliterate(source,settings){const languageOverrides=drupalSettings.transliteration_language_overrides[drupalSettings.langcode];const replace={};if(languageOverrides){Object.keys(languageOverrides).forEach((key)=>{replace[String.fromCharCode(key)]=languageOverrides[key]})}
const transliteratedSource=transliterateLibrary(source,{replace});return prepareMachineName(transliteratedSource,settings)},}})(jQuery,Drupal,drupalSettings,transliterate)