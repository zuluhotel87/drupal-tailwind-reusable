'use strict';const{globSync}=require('glob');const log=require('./log');const fs=require('node:fs');const regexList=[/*@module \b(.*)\b[\s\S]*?export default(?:class|function)?\b(\w+)\b/g,/*@module \b(.*)\b[\s\S]*?@(?:typedef|interface)(?:.*~)?(\w+)/g,];const globOptions={cwd:process.cwd()+'/node_modules/@ckeditor/',absolute:!0,};function generateTypeDef(file,module,name){const cleanModule=module.replace('module:','');return `/**
 * Declared in file @ckeditor/${file.replace(globOptions.cwd, '')}
 *
 * @typedef {module:${cleanModule}} module:${cleanModule}~${name}
 */
`}
function getFile(filePath){try{return fs.readFileSync(filePath,'utf8')}catch(err){return''}}
function processFile(filePath){const fileData=getFile(filePath);for(const regex of regexList){regex.lastIndex=0;const m=regex.exec(fileData);if(m){return generateTypeDef(filePath,m[1],m[2])}}
return!1}
const definitions=globSync('./ckeditor5*/src/**/*.+(js|jsdoc)',globOptions).sort().map(processFile);const existingDefinitions=definitions.filter((e)=>!!e);fs.writeFile(`./modules/ckeditor5/js/build/ckeditor5.types.jsdoc`,existingDefinitions.join('\n'),()=>{log(`CKEditor 5 types have been generated: ${existingDefinitions.length} declarations aliased, ${definitions.length - existingDefinitions.length} files ignored`)});process.exitCode=0