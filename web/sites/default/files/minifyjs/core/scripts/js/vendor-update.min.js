const path=require('node:path');const{copyFile,writeFile,readFile,chmod,mkdir}=require('node:fs').promises;const ckeditor5Files=require('./assets/ckeditor5Files');const jQueryUIProcess=require('./assets/process/jqueryui');const mapProcess=require('./assets/process/map');const coreFolder=path.resolve(__dirname,'../../');const packageFolder=`${coreFolder}/node_modules`;const assetsFolder=`${coreFolder}/assets/vendor`;(async()=>{const librariesPath=`${coreFolder}/core.libraries.yml`;const libraries=(await readFile(librariesPath)).toString().split('\n\n');function updateLibraryVersion(libraryName,{version}){const libraryIndex=libraries.findIndex((lib)=>lib.startsWith(libraryName),);if(libraryIndex>0){const libraryDeclaration=libraries[libraryIndex];const currentVersion=libraryDeclaration.match(/version:(?: [&\w_]+)? "(.*)"\n/)[1];libraries[libraryIndex]=libraryDeclaration.replace(new RegExp(currentVersion,'g'),version,)}}
const ASSET_LIST=[{pack:'backbone',library:'internal.backbone',files:['backbone.js','backbone-min.js','backbone-min.js.map'],},{pack:'jquery',files:[{from:'dist/jquery.js',to:'jquery.js'},{from:'dist/jquery.min.js',to:'jquery.min.js'},{from:'dist/jquery.min.map',to:'jquery.min.map'},],},{pack:'js-cookie',files:[{from:'dist/js.cookie.min.js',to:'js.cookie.min.js'}],},{pack:'normalize.css',folder:'normalize-css',library:'normalize',files:['normalize.css'],},{pack:'@drupal/once',folder:'once',files:[{from:'dist/once.js',to:'once.js'},{from:'dist/once.min.js',to:'once.min.js'},{from:'dist/once.min.js.map',to:'once.min.js.map'},],},{pack:'sortablejs',folder:'sortable',files:['Sortable.min.js']},{pack:'tabbable',files:[{from:'dist/index.umd.min.js',to:'index.umd.min.js'},{from:'dist/index.umd.min.js.map',to:'index.umd.min.js.map'},],},{pack:'underscore',library:'internal.underscore',files:['underscore-min.js','underscore-min.js.map'],},{pack:'loadjs',files:[{from:'dist/loadjs.min.js',to:'loadjs.min.js'}],},{pack:'tua-body-scroll-lock',files:[{from:'dist/tua-bsl.umd.min.js',to:'tua-bsl.umd.min.js'},],},{pack:'transliteration',files:[{from:'dist/browser/bundle.umd.min.js',to:'bundle.umd.min.js'},{from:'dist/browser/bundle.umd.min.js.map',to:'bundle.umd.min.js.map'},],},{pack:'jquery-ui',folder:'jquery.ui',process:{'.js':jQueryUIProcess,},files:['themes/base/autocomplete.css','themes/base/button.css','themes/base/checkboxradio.css','themes/base/controlgroup.css','themes/base/core.css','themes/base/dialog.css','themes/base/draggable.css','themes/base/images/ui-bg_flat_0_aaaaaa_40x100.png','themes/base/images/ui-icons_444444_256x240.png','themes/base/images/ui-icons_555555_256x240.png','themes/base/images/ui-icons_777620_256x240.png','themes/base/images/ui-icons_777777_256x240.png','themes/base/images/ui-icons_cc0000_256x240.png','themes/base/images/ui-icons_ffffff_256x240.png','themes/base/menu.css','themes/base/resizable.css','themes/base/theme.css','ui/data.js','ui/disable-selection.js','ui/focusable.js','ui/form-reset-mixin.js','ui/jquery-patch.js','ui/keycode.js','ui/labels.js','ui/plugin.js','ui/scroll-parent.js','ui/unique-id.js','ui/version.js','ui/widget.js','ui/widgets/autocomplete.js','ui/widgets/button.js','ui/widgets/checkboxradio.js','ui/widgets/controlgroup.js','ui/widgets/dialog.js','ui/widgets/draggable.js','ui/widgets/menu.js','ui/widgets/mouse.js','ui/widgets/resizable.js',],},{pack:'@floating-ui/dom',folder:'floating-ui',library:'internal.floating-ui',files:[{from:'../core/dist/floating-ui.core.umd.min.js',to:'floating-ui.core.umd.min.js'},{from:'dist/floating-ui.dom.umd.min.js',to:'floating-ui.dom.umd.min.js'},],},...ckeditor5Files(packageFolder),];const defaultProcessCallbacks={'.map':mapProcess,};function normalizeFile(file){let normalized=file;if(typeof file==='string'){normalized={from:file,to:file,}}
return normalized}
for(const{pack,files=[],folder=!1,library=!1,process={}}of ASSET_LIST){const sourceFolder=pack;const libraryName=library||folder||pack;const destFolder=folder||pack;const processCallbacks={...defaultProcessCallbacks,...process};try{const packageInfo=JSON.parse((await readFile(`${packageFolder}/${sourceFolder}/package.json`)).toString());updateLibraryVersion(libraryName,packageInfo)}catch(e){}
for(const file of files.map(normalizeFile)){const sourceFile=`${packageFolder}/${sourceFolder}/${file.from}`;const destFile=`${assetsFolder}/${destFolder}/${file.to}`;const extension=path.extname(file.from);try{await mkdir(path.dirname(destFile),{recursive:!0})}catch(e){}
if(processCallbacks[extension]){const contents=(await readFile(sourceFile)).toString();const results=await processCallbacks[extension]({file,contents});console.log(`Process ${sourceFolder}/${file.from} and save ${results.length} files:\n  ${results.map(({ filename = file.to }) => filename).join(', ')}`);for(const{filename=file.to,contents}of results){await writeFile(`${assetsFolder}/${destFolder}/${filename}`,contents)}}else{console.log(`Copy ${sourceFolder}/${file.from} to ${destFolder}/${file.to}`);await copyFile(sourceFile,destFile)}}}
await writeFile(librariesPath,libraries.join('\n\n'))})()