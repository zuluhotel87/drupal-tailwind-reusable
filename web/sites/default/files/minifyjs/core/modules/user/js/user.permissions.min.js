(function($,Drupal,debounce){Drupal.behaviors.permissions={attach(){const[table]=once('permissions','table#permissions');if(!table){return}
const $fakeCheckbox=$(Drupal.theme('checkbox')).removeClass('form-checkbox').addClass('fake-checkbox js-fake-checkbox').attr({disabled:'disabled',checked:'checked',title:Drupal.t('This permission is inherited from the authenticated user role.',),});const $wrapper=$('<div></div>').append($fakeCheckbox);const fakeCheckboxHtml=$wrapper.html();function tableRowProcessing({target}){once('permission-checkbox',target).forEach((checkbox)=>{checkbox.closest('tr').querySelectorAll('input[type="checkbox"]:not(.js-rid-anonymous, .js-rid-authenticated)',).forEach((check)=>{check.classList.add('real-checkbox','js-real-checkbox');check.insertAdjacentHTML('beforebegin',fakeCheckboxHtml)})})}
const checkedCheckboxObserver=new IntersectionObserver((entries,thisObserver)=>{entries.filter((entry)=>entry.isIntersecting).forEach((entry)=>{tableRowProcessing(entry);thisObserver.unobserve(entry.target)})},{rootMargin:'50%',},);table.querySelectorAll('tbody tr input[type="checkbox"].js-rid-authenticated:checked',).forEach((checkbox)=>checkedCheckboxObserver.observe(checkbox));$(table).on('click.permissions','input[type="checkbox"].js-rid-authenticated',tableRowProcessing,)},};Drupal.behaviors.tableFilterByText={attach(context,settings){const[input]=once('table-filter-text','input.table-filter-text');if(!input){return}
const tableSelector=input.getAttribute('data-table');const $table=$(tableSelector);const $rows=$table.find('tbody tr');function hideEmptyPermissionHeader(index,row){const tdsWithModuleClass=row.querySelectorAll('td.module');function isVisible(element){return getComputedStyle(element).display!=='none'}
if(tdsWithModuleClass.length>0){let nextVisibleSibling=row.nextElementSibling;while(nextVisibleSibling&&!isVisible(nextVisibleSibling)){nextVisibleSibling=nextVisibleSibling.nextElementSibling}
let nextVisibleSiblingHasModuleClass=!1;if(nextVisibleSibling){const nextSiblingTdsWithModuleClass=nextVisibleSibling.querySelectorAll('td.module');nextVisibleSiblingHasModuleClass=nextSiblingTdsWithModuleClass.length>0}
const isLastVisibleModuleRow=!nextVisibleSibling||!isVisible(nextVisibleSibling);$(row).toggle(!nextVisibleSiblingHasModuleClass&&!isLastVisibleModuleRow,)}}
function filterPermissionList(e){const query=e.target.value;if(query.length===0){$rows.show()}
const re=new RegExp(`\\b${query}`,'i');function showPermissionRow(index,row){const sources=row.querySelectorAll('.table-filter-text-source');if(sources.length>0){const textMatch=sources[0].textContent.search(re)!==-1;$(row).closest('tr').toggle(textMatch)}}
$rows.show();if(query.length>=2){$rows.each(showPermissionRow);const visibleRows=$table.find('tbody tr:visible');visibleRows.each(hideEmptyPermissionHeader);const rowsWithoutEmptyModuleName=$table.find('tbody tr:visible');const tdsWithModuleOrPermissionClass=rowsWithoutEmptyModuleName.find('.permission');Drupal.announce(Drupal.formatPlural(tdsWithModuleOrPermissionClass.length,'1 permission is available in the modified list.','@count permissions are available in the modified list.',),)}}
function preventEnterKey(event){if(event.which===13){event.preventDefault();event.stopPropagation()}}
if($table.length){$(input).on({keyup:debounce(filterPermissionList,200),click:debounce(filterPermissionList,200),keydown:preventEnterKey,})}},}})(jQuery,Drupal,Drupal.debounce)