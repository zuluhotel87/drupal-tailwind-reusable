((Drupal,drupalSettings)=>{const replacementsSelector=`script[data-big-pipe-replacement-for-placeholder-with-id]`;const ajaxObject=Drupal.ajax({url:'',base:!1,element:!1,progress:!1,});function mapTextContentToAjaxResponse(content){if(content===''){return!1}
try{return JSON.parse(content)}catch(e){return!1}}
function processReplacement(replacement){const id=replacement.dataset.bigPipeReplacementForPlaceholderWithId;const content=replacement.textContent.trim();if(typeof drupalSettings.bigPipePlaceholderIds[id]==='undefined'){return}
const response=mapTextContentToAjaxResponse(content);if(response===!1){return}
delete drupalSettings.bigPipePlaceholderIds[id];ajaxObject.success(response,'success')}
function checkMutation(node){return Boolean(node.nodeType===Node.ELEMENT_NODE&&node.nodeName==='SCRIPT'&&node.dataset&&node.dataset.bigPipeReplacementForPlaceholderWithId&&typeof drupalSettings.bigPipePlaceholderIds[node.dataset.bigPipeReplacementForPlaceholderWithId]!=='undefined',)}
function checkMutationAndProcess(node){if(checkMutation(node)){processReplacement(node)}else if(node.parentNode!==null&&checkMutation(node.parentNode)){processReplacement(node.parentNode)}}
function processMutations(mutations){mutations.forEach(({addedNodes,type,target})=>{addedNodes.forEach(checkMutationAndProcess);if(type==='characterData'&&checkMutation(target.parentNode)&&drupalSettings.bigPipePlaceholderIds[target.parentNode.dataset.bigPipeReplacementForPlaceholderWithId]===!0){processReplacement(target.parentNode)}})}
const observer=new MutationObserver(processMutations);Drupal.attachBehaviors(document);document.querySelectorAll(replacementsSelector).forEach(processReplacement);observer.observe(document.body,{childList:!0,subtree:!0,characterData:!0,});window.addEventListener('DOMContentLoaded',()=>{const mutations=observer.takeRecords();observer.disconnect();if(mutations.length){processMutations(mutations)}
Drupal.ajax.instances[ajaxObject.instanceIndex]=null})})(Drupal,drupalSettings)