import{ButtonView,FocusCycler,LabeledFieldView,SwitchButtonView,View,ViewCollection,createLabeledInputText,injectCssTransitionDisabler,submitHandler,}from 'ckeditor5/src/ui';import{FocusTracker,KeystrokeHandler}from 'ckeditor5/src/utils';import{icons}from 'ckeditor5/src/core';export default class ImageAlternativeTextFormView extends View{constructor(locale){super(locale);this.focusTracker=new FocusTracker();this.keystrokes=new KeystrokeHandler();this.decorativeToggle=this._decorativeToggleView();this.labeledInput=this._createLabeledInputView();this.saveButtonView=this._createButton(Drupal.t('Save'),icons.check,'ck-button-save',);this.saveButtonView.type='submit';this.saveButtonView.bind('isEnabled').to(this.decorativeToggle,'isOn',this.labeledInput,'isEmpty',(isDecorativeToggleOn,isLabeledInputEmpty)=>isDecorativeToggleOn||!isLabeledInputEmpty,);this.cancelButtonView=this._createButton(Drupal.t('Cancel'),icons.cancel,'ck-button-cancel','cancel',);this._focusables=new ViewCollection();this._focusCycler=new FocusCycler({focusables:this._focusables,focusTracker:this.focusTracker,keystrokeHandler:this.keystrokes,actions:{focusPrevious:'shift + tab',focusNext:'tab',},});this.setTemplate({tag:'form',attributes:{class:['ck','ck-text-alternative-form','ck-text-alternative-form--with-decorative-toggle','ck-responsive-form',],tabindex:'-1',},children:[{tag:'div',attributes:{class:['ck','ck-text-alternative-form__decorative-toggle'],},children:[this.decorativeToggle],},this.labeledInput,this.saveButtonView,this.cancelButtonView,],});injectCssTransitionDisabler(this)}
render(){super.render();this.keystrokes.listenTo(this.element);submitHandler({view:this});[this.decorativeToggle,this.labeledInput,this.saveButtonView,this.cancelButtonView,].forEach((v)=>{this._focusables.add(v);this.focusTracker.add(v.element)})}
destroy(){super.destroy();this.focusTracker.destroy();this.keystrokes.destroy()}
_createButton(label,icon,className,eventName){const button=new ButtonView(this.locale);button.set({label,icon,tooltip:!0,});button.extendTemplate({attributes:{class:className,},});if(eventName){button.delegate('execute').to(this,eventName)}
return button}
_createLabeledInputView(){const labeledInput=new LabeledFieldView(this.locale,createLabeledInputText,);labeledInput.bind('class').to(this.decorativeToggle,'isOn',(value)=>(value?'ck-hidden':''));labeledInput.label=Drupal.t('Alternative text');return labeledInput}
_decorativeToggleView(){const decorativeToggle=new SwitchButtonView(this.locale);decorativeToggle.set({withText:!0,label:Drupal.t('Decorative image'),});decorativeToggle.on('execute',()=>{decorativeToggle.set('isOn',!decorativeToggle.isOn)});return decorativeToggle}}