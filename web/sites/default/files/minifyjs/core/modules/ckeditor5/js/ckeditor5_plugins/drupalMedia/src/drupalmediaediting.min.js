import{Plugin}from 'ckeditor5/src/core';import{toWidget,Widget}from 'ckeditor5/src/widget';import InsertDrupalMediaCommand from './insertdrupalmedia';import{getPreviewContainer,isDrupalMedia}from './utils';import{METADATA_ERROR}from './mediaimagetextalternative/utils';export default class DrupalMediaEditing extends Plugin{static get requires(){return[Widget]}
constructor(editor){super(editor);this.attrs={drupalMediaAlt:'alt',drupalMediaEntityType:'data-entity-type',drupalMediaEntityUuid:'data-entity-uuid',};this.converterAttributes=['drupalMediaEntityUuid','drupalElementStyleViewMode','drupalMediaEntityType','drupalMediaAlt',]}
init(){const options=this.editor.config.get('drupalMedia');if(!options){return}
const{previewURL,themeError}=options;this.previewUrl=previewURL;this.labelError=Drupal.t('Preview failed');this.themeError=themeError||`
      <p>${Drupal.t(
        'An error occurred while trying to preview the media. Save your work and reload this page.',
      )}<p>
    `;this._defineSchema();this._defineConverters();this._defineListeners();this.editor.commands.add('insertDrupalMedia',new InsertDrupalMediaCommand(this.editor),)}
upcastDrupalMediaIsImage(modelElement){const{model,plugins}=this.editor;const metadataRepository=plugins.get('DrupalMediaMetadataRepository');metadataRepository.getMetadata(modelElement).then((metadata)=>{if(!modelElement){return}
model.enqueueChange({isUndoable:!1},(writer)=>{writer.setAttribute('drupalMediaIsImage',!!metadata.imageSourceMetadata,modelElement,)})}).catch((e)=>{if(!modelElement){return}
console.warn(e.toString());model.enqueueChange({isUndoable:!1},(writer)=>{writer.setAttribute('drupalMediaIsImage',METADATA_ERROR,modelElement,)})})}
upcastDrupalMediaType(modelElement){const metadataRepository=this.editor.plugins.get('DrupalMediaMetadataRepository',);metadataRepository.getMetadata(modelElement).then((metadata)=>{if(!modelElement){return}
this.editor.model.enqueueChange({isUndoable:!1},(writer)=>{writer.setAttribute('drupalMediaType',metadata.type,modelElement)})}).catch((e)=>{if(!modelElement){return}
console.warn(e.toString());this.editor.model.enqueueChange({isUndoable:!1},(writer)=>{writer.setAttribute('drupalMediaType',METADATA_ERROR,modelElement)})})}
async _fetchPreview(modelElement){const query={text:this._renderElement(modelElement),uuid:modelElement.getAttribute('drupalMediaEntityUuid'),};const response=await fetch(`${this.previewUrl}?${new URLSearchParams(query)}`,{headers:{'X-Drupal-MediaPreview-CSRF-Token':this.editor.config.get('drupalMedia').previewCsrfToken,},},);if(response.ok){const label=response.headers.get('drupal-media-label');const preview=await response.text();return{label,preview}}
return{label:this.labelError,preview:this.themeError}}
_defineSchema(){const schema=this.editor.model.schema;schema.register('drupalMedia',{inheritAllFrom:'$blockObject',allowAttributes:Object.keys(this.attrs),});this.editor.editing.view.domConverter.blockElements.push('drupal-media')}
_defineConverters(){const conversion=this.editor.conversion;const metadataRepository=this.editor.plugins.get('DrupalMediaMetadataRepository',);conversion.for('upcast').elementToElement({view:{name:'drupal-media',},model:'drupalMedia',}).add((dispatcher)=>{dispatcher.on('element:drupal-media',(evt,data)=>{const[modelElement]=data.modelRange.getItems();metadataRepository.getMetadata(modelElement).then((metadata)=>{if(!modelElement){return}
this.upcastDrupalMediaIsImage(modelElement);this.editor.model.enqueueChange({isUndoable:!1},(writer)=>{writer.setAttribute('drupalMediaType',metadata.type,modelElement,)},)}).catch((e)=>{console.warn(e.toString())})},{priority:'lowest'},)});conversion.for('dataDowncast').elementToElement({model:'drupalMedia',view:{name:'drupal-media',},});conversion.for('editingDowncast').elementToElement({model:'drupalMedia',view:(modelElement,{writer})=>{const container=writer.createContainerElement('figure',{class:'drupal-media',});if(!this.previewUrl){const mediaPreview=writer.createRawElement('div',{'data-drupal-media-preview':'unavailable',});writer.insert(writer.createPositionAt(container,0),mediaPreview)}
writer.setCustomProperty('drupalMedia',!0,container);return toWidget(container,writer,{label:Drupal.t('Media widget'),})},}).add((dispatcher)=>{const converter=(event,data,conversionApi)=>{const viewWriter=conversionApi.writer;const modelElement=data.item;const container=conversionApi.mapper.toViewElement(data.item);let media=getPreviewContainer(container.getChildren());if(media){if(media.getAttribute('data-drupal-media-preview')!=='ready'){return}
viewWriter.setAttribute('data-drupal-media-preview','loading',media,)}else{media=viewWriter.createRawElement('div',{'data-drupal-media-preview':'loading',});viewWriter.insert(viewWriter.createPositionAt(container,0),media)}
this._fetchPreview(modelElement).then(({label,preview})=>{if(!media){return}
this.editor.editing.view.change((writer)=>{const mediaPreview=writer.createRawElement('div',{'data-drupal-media-preview':'ready','aria-label':label},(domElement)=>{domElement.innerHTML=preview},);writer.insert(writer.createPositionBefore(media),mediaPreview);writer.remove(media)})})};this.converterAttributes.forEach((attribute)=>{dispatcher.on(`attribute:${attribute}:drupalMedia`,converter)});return dispatcher});conversion.for('editingDowncast').add((dispatcher)=>{dispatcher.on('attribute:drupalElementStyleAlign:drupalMedia',(evt,data,conversionApi)=>{const alignMapping={left:'drupal-media-style-align-left',right:'drupal-media-style-align-right',center:'drupal-media-style-align-center',};const viewElement=conversionApi.mapper.toViewElement(data.item);const viewWriter=conversionApi.writer;if(alignMapping[data.attributeOldValue]){viewWriter.removeClass(alignMapping[data.attributeOldValue],viewElement,)}
if(!alignMapping[data.attributeNewValue]){return}
if(!conversionApi.consumable.consume(data.item,evt.name)){return}
viewWriter.addClass(alignMapping[data.attributeNewValue],viewElement,)},)});Object.keys(this.attrs).forEach((modelKey)=>{const attributeMapping={model:{key:modelKey,name:'drupalMedia',},view:{name:'drupal-media',key:this.attrs[modelKey],},};conversion.for('dataDowncast').attributeToAttribute(attributeMapping);conversion.for('upcast').attributeToAttribute(attributeMapping)});}
_defineListeners(){this.editor.model.on('insertContent',(eventInfo,[modelElement])=>{if(!isDrupalMedia(modelElement)){return}
this.upcastDrupalMediaIsImage(modelElement);this.upcastDrupalMediaType(modelElement)})}
_renderElement(modelElement){const modelDocumentFragment=this.editor.model.change((writer)=>{const modelDocumentFragment=writer.createDocumentFragment();const clonedModelElement=writer.cloneElement(modelElement,!1);const attributeIgnoreList=['linkHref'];attributeIgnoreList.forEach((attribute)=>{writer.removeAttribute(attribute,clonedModelElement)});writer.append(clonedModelElement,modelDocumentFragment);return modelDocumentFragment});return this.editor.data.stringify(modelDocumentFragment)}
static get pluginName(){return'DrupalMediaEditing'}}