import{Plugin,icons}from 'ckeditor5/src/core';import{ButtonView,ContextualBalloon,clickOutsideHandler,}from 'ckeditor5/src/ui';import{repositionContextualBalloon,getBalloonPositionData,}from '@ckeditor/ckeditor5-image/src/image/ui/utils';import ImageAlternativeTextFormView from './ui/imagealternativetextformview';import MissingAlternativeTextView from './ui/missingalternativetextview';export default class DrupalImageAlternativeTextUi extends Plugin{static get requires(){return[ContextualBalloon]}
static get pluginName(){return'DrupalImageTextAlternativeUI'}
init(){this._createButton();this._createForm();this._createMissingAltTextComponent();const showAlternativeTextForm=()=>{const imageUtils=this.editor.plugins.get('ImageUtils');if(imageUtils.getClosestSelectedImageWidget(this.editor.editing.view.document.selection,)){this._showForm()}};if(this.editor.commands.get('insertImage')){const insertImage=this.editor.commands.get('insertImage');insertImage.on('execute',showAlternativeTextForm)}
if(this.editor.plugins.has('ImageUploadEditing')){const imageUploadEditing=this.editor.plugins.get('ImageUploadEditing');imageUploadEditing.on('uploadComplete',showAlternativeTextForm)}}
_createMissingAltTextComponent(){this.editor.ui.componentFactory.add('drupalImageAlternativeTextMissing',(locale)=>{const view=new MissingAlternativeTextView(locale);view.listenTo(view.button,'execute',()=>{if(this._isInBalloon){this._balloon.remove(this._form)}
this._showForm()});view.listenTo(this.editor.ui,'update',()=>{view.set({isVisible:!this._isVisible||!view.isSelected})});return view},)}
destroy(){super.destroy();this._form.destroy()}
_createButton(){const editor=this.editor;editor.ui.componentFactory.add('drupalImageAlternativeText',(locale)=>{const command=editor.commands.get('imageTextAlternative');const view=new ButtonView(locale);view.set({label:Drupal.t('Change image alternative text'),icon:icons.lowVision,tooltip:!0,});view.bind('isEnabled').to(command,'isEnabled');this.listenTo(view,'execute',()=>{this._showForm()});return view})}
_createForm(){const editor=this.editor;const view=editor.editing.view;const viewDocument=view.document;const imageUtils=editor.plugins.get('ImageUtils');this._balloon=this.editor.plugins.get('ContextualBalloon');this._form=new ImageAlternativeTextFormView(editor.locale);this._form.render();this.listenTo(this._form,'submit',()=>{editor.execute('imageTextAlternative',{newValue:this._form.decorativeToggle.isOn?'':this._form.labeledInput.fieldView.element.value,});this._hideForm(!0)});this.listenTo(this._form,'cancel',()=>{this._hideForm(!0)});this.listenTo(this._form.decorativeToggle,'execute',()=>{repositionContextualBalloon(editor)});this._form.keystrokes.set('Esc',(data,cancel)=>{this._hideForm(!0);cancel()});this.listenTo(editor.ui,'update',()=>{if(!imageUtils.getClosestSelectedImageWidget(viewDocument.selection)){this._hideForm(!0)}else if(this._isVisible){repositionContextualBalloon(editor)}});clickOutsideHandler({emitter:this._form,activator:()=>this._isVisible,contextElements:[this._balloon.view.element],callback:()=>this._hideForm(),})}
_showForm(){if(this._isVisible){return}
const editor=this.editor;const command=editor.commands.get('imageTextAlternative');const decorativeToggle=this._form.decorativeToggle;const labeledInput=this._form.labeledInput;this._form.disableCssTransitions();if(!this._isInBalloon){this._balloon.add({view:this._form,position:getBalloonPositionData(editor),})}
decorativeToggle.isOn=command.value==='';labeledInput.fieldView.element.value=command.value||'';labeledInput.fieldView.value=labeledInput.fieldView.element.value;if(!decorativeToggle.isOn){labeledInput.fieldView.select()}else{decorativeToggle.focus()}
this._form.enableCssTransitions()}
_hideForm(focusEditable){if(!this._isInBalloon){return}
if(this._form.focusTracker.isFocused){this._form.saveButtonView.focus()}
this._balloon.remove(this._form);if(focusEditable){this.editor.editing.view.focus()}}
get _isVisible(){return this._balloon.visibleView===this._form}
get _isInBalloon(){return this._balloon.hasView(this._form)}}