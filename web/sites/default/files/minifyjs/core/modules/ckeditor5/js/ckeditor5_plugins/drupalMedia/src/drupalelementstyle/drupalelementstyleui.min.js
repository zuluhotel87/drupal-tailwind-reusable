import{Plugin}from 'ckeditor5/src/core';import{Collection,toMap}from 'ckeditor5/src/utils';import utils from '@ckeditor/ckeditor5-image/src/imagestyle/utils';import{addToolbarToDropdown,addListToDropdown,ButtonView,createDropdown,DropdownButtonView,SplitButtonView,ViewModel,}from 'ckeditor5/src/ui';import DrupalElementStyleEditing from './drupalelementstyleediting';import{isObject}from '../utils';import{getClosestElementWithElementStyleAttribute}from './utils';const identity=(value)=>{return value};const getDropdownButtonTitle=(dropdownTitle,buttonTitle)=>{return(dropdownTitle?`${dropdownTitle}: `:'')+buttonTitle};function getUIComponentName(name,group){return `drupalElementStyle:${group}:${name}`}
export default class DrupalElementStyleUi extends Plugin{static get requires(){return[DrupalElementStyleEditing]}
init(){const{plugins}=this.editor;const toolbarConfig=this.editor.config.get('drupalMedia.toolbar')||[];const definedStyles=plugins.get('DrupalElementStyleEditing',).normalizedStyles;Object.keys(definedStyles).forEach((group)=>{definedStyles[group].forEach((style)=>{this._createButton(style,group,definedStyles[group])})});const definedDropdowns=toolbarConfig.filter(isObject).filter((obj)=>{const items=[];if(!obj.display){console.warn('dropdown configuration must include a display key specifying either listDropdown or splitButton.',);return!1}
if(!obj.items.includes(obj.defaultItem)){console.warn('defaultItem must be part of items in the dropdown configuration.',)}
for(const item of obj.items){const groupName=item.split(':')[1];items.push(groupName)}
if(!items.every((i)=>i===items[0])){console.warn('dropdown configuration should only contain buttons from one group.',);return!1}
return!0});definedDropdowns.forEach((dropdownConfig)=>{if(dropdownConfig.items.length>=2){const groupName=dropdownConfig.name.split(':')[1];switch(dropdownConfig.display){case 'splitButton':this._createDropdown(dropdownConfig,definedStyles[groupName]);break;case 'listDropdown':this._createListDropdown(dropdownConfig,definedStyles[groupName]);break;default:break}}})}
updateOptionVisibility(definedStyles,style,option,group){const{selection}=this.editor.model.document;const definedStylesObject={};definedStylesObject[group]=definedStyles;const modelElement=selection?selection.getSelectedElement():getClosestElementWithElementStyleAttribute(selection,this.editor.model.schema,definedStylesObject,);const filteredDefinedStyles=definedStyles.filter(function(item){for(const[key,value]of toMap(item.modelAttributes)){if(modelElement&&modelElement.hasAttribute(key)){return value.includes(modelElement.getAttribute(key))}}
return!0});if(option.hasOwnProperty('model')){if(!filteredDefinedStyles.includes(style)){option.model.set({class:'ck-hidden'})}else{option.model.set({class:''})}}else if(!filteredDefinedStyles.includes(style)){option.set({class:'ck-hidden'})}else{option.set({class:''})}}
_createDropdown(dropdownConfig,definedStyles){const factory=this.editor.ui.componentFactory;factory.add(dropdownConfig.name,(locale)=>{let defaultButton;const{defaultItem,items,title}=dropdownConfig;const buttonViews=items.filter((itemName)=>{const groupName=itemName.split(':')[1];return definedStyles.find(({name})=>getUIComponentName(name,groupName)===itemName,)}).map((buttonName)=>{const button=factory.create(buttonName);if(buttonName===defaultItem){defaultButton=button}
return button});if(items.length!==buttonViews.length){utils.warnInvalidStyle({dropdown:dropdownConfig})}
const dropdownView=createDropdown(locale,SplitButtonView);const splitButtonView=dropdownView.buttonView;addToolbarToDropdown(dropdownView,buttonViews);splitButtonView.set({label:getDropdownButtonTitle(title,defaultButton.label),class:null,tooltip:!0,});splitButtonView.bind('icon').toMany(buttonViews,'isOn',(...areOn)=>{const index=areOn.findIndex(identity);return index<0?defaultButton.icon:buttonViews[index].icon});splitButtonView.bind('label').toMany(buttonViews,'isOn',(...areOn)=>{const index=areOn.findIndex(identity);return getDropdownButtonTitle(title,index<0?defaultButton.label:buttonViews[index].label,)});splitButtonView.bind('isOn').toMany(buttonViews,'isOn',(...areOn)=>areOn.some(identity));splitButtonView.bind('class').toMany(buttonViews,'isOn',(...areOn)=>areOn.some(identity)?'ck-splitbutton_flatten':null,);splitButtonView.on('execute',()=>{if(!buttonViews.some(({isOn})=>isOn)){defaultButton.fire('execute')}else{dropdownView.isOpen=!dropdownView.isOpen}});dropdownView.bind('isEnabled').toMany(buttonViews,'isEnabled',(...areEnabled)=>areEnabled.some(identity),);return dropdownView})}
_createButton(buttonConfig,group,definedStyles){const buttonName=buttonConfig.name;this.editor.ui.componentFactory.add(getUIComponentName(buttonName,group),(locale)=>{const command=this.editor.commands.get('drupalElementStyle');const view=new ButtonView(locale);view.set({label:buttonConfig.title,icon:buttonConfig.icon,tooltip:!0,isToggleable:!0,});view.bind('isEnabled').to(command,'isEnabled');view.bind('isOn').to(command,'value',(value)=>{return value&&value[group]===buttonName});view.on('execute',this._executeCommand.bind(this,buttonName,group));this.listenTo(this.editor.ui,'update',()=>{this.updateOptionVisibility(definedStyles,buttonConfig,view,group)});return view},)}
getDropdownListItemDefinitions(definedStyles,command,group){const itemDefinitions=new Collection();definedStyles.forEach((style)=>{const definition={type:'button',model:new ViewModel({group,commandValue:style.name,label:style.title,withText:!0,class:'',}),};itemDefinitions.add(definition);this.listenTo(this.editor.ui,'update',()=>{this.updateOptionVisibility(definedStyles,style,definition,group)})});return itemDefinitions}
_createListDropdown(dropdownConfig,definedStyles){const factory=this.editor.ui.componentFactory;factory.add(dropdownConfig.name,(locale)=>{let defaultButton;const{defaultItem,items,title,defaultText}=dropdownConfig;const group=dropdownConfig.name.split(':')[1];const buttonViews=items.filter((itemName)=>{return definedStyles.find(({name})=>getUIComponentName(name,group)===itemName,)}).map((buttonName)=>{const button=factory.create(buttonName);if(buttonName===defaultItem){defaultButton=button}
return button});if(items.length!==buttonViews.length){utils.warnInvalidStyle({dropdown:dropdownConfig})}
const dropdownView=createDropdown(locale,DropdownButtonView);const dropdownButtonView=dropdownView.buttonView;dropdownButtonView.set({label:getDropdownButtonTitle(title,defaultButton.label),class:null,tooltip:defaultText,withText:!0,});const command=this.editor.commands.get('drupalElementStyle');dropdownButtonView.bind('label').to(command,'value',(commandValue)=>{if(commandValue&&commandValue[group]){for(const style of definedStyles){if(style.name===commandValue[group]){return style.title}}}
return defaultText});dropdownView.bind('isOn').to(command);dropdownView.bind('isEnabled').to(this);addListToDropdown(dropdownView,this.getDropdownListItemDefinitions(definedStyles,command,group),);this.listenTo(dropdownView,'execute',(evt)=>{this._executeCommand(evt.source.commandValue,evt.source.group)});return dropdownView})}
_executeCommand(name,group){this.editor.execute('drupalElementStyle',{value:name,group,});this.editor.editing.view.focus()}
static get pluginName(){return'DrupalElementStyleUi'}}