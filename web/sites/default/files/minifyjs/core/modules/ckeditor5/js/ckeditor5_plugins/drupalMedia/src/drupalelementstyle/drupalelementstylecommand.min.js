import{Command}from 'ckeditor5/src/core';import{getClosestElementWithElementStyleAttribute}from './utils';import{groupNameToModelAttributeKey}from '../utils';export default class DrupalElementStyleCommand extends Command{constructor(editor,styles){super(editor);this.styles={};Object.keys(styles).forEach((group)=>{this.styles[group]=new Map(styles[group].map((style)=>{return[style.name,style]}),)});this.modelAttributes=[];for(const group of Object.keys(styles)){const modelAttribute=groupNameToModelAttributeKey(group);this.modelAttributes.push(modelAttribute)}}
refresh(){const{editor}=this;const element=getClosestElementWithElementStyleAttribute(editor.model.document.selection,editor.model.schema,this.modelAttributes,);this.isEnabled=!!element;if(this.isEnabled){this.value=this.getValue(element)}else{this.value=!1}}
getValue(element){const value={};Object.keys(this.styles).forEach((group)=>{const modelAttribute=groupNameToModelAttributeKey(group);if(element.hasAttribute(modelAttribute)){value[group]=element.getAttribute(modelAttribute)}else{for(const[,style]of this.styles[group]){if(style.isDefault){value[group]=style.name}}}});return value}
execute(options={}){const{editor:{model},}=this;const{value,group}=options;const modelAttribute=groupNameToModelAttributeKey(group);model.change((writer)=>{const element=getClosestElementWithElementStyleAttribute(model.document.selection,model.schema,this.modelAttributes,);if(!value||this.styles[group].get(value).isDefault){writer.removeAttribute(modelAttribute,element)}else{writer.setAttribute(modelAttribute,value,element)}})}}