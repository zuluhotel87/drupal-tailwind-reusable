import{Plugin}from 'ckeditor5/src/core';import{Matcher}from 'ckeditor5/src/engine';import{toMap}from 'ckeditor5/src/utils';function getFirstMedia(viewElement){return Array.from(viewElement.getChildren()).find((child)=>child.name==='drupal-media',)}
function upcastMediaLink(){return(dispatcher)=>{dispatcher.on('element:a',(evt,data,conversionApi)=>{const viewLink=data.viewItem;const mediaInLink=getFirstMedia(viewLink);if(!mediaInLink){return}
const consumableAttributes={attributes:['href'],name:!0};if(!conversionApi.consumable.consume(viewLink,consumableAttributes)){return}
const linkHref=viewLink.getAttribute('href');if(linkHref===null){return}
const conversionResult=conversionApi.convertItem(mediaInLink,data.modelCursor,);data.modelRange=conversionResult.modelRange;data.modelCursor=conversionResult.modelCursor;const modelElement=data.modelCursor.nodeBefore;if(modelElement&&modelElement.is('element','drupalMedia')){conversionApi.writer.setAttribute('linkHref',linkHref,modelElement)}},{priority:'high'},)}}
function dataDowncastMediaLink(){return(dispatcher)=>{dispatcher.on('attribute:linkHref:drupalMedia',(evt,data,conversionApi)=>{const{writer}=conversionApi;if(!conversionApi.consumable.consume(data.item,evt.name)){return}
const mediaElement=conversionApi.mapper.toViewElement(data.item);const linkElement=writer.createContainerElement('a',{href:data.attributeNewValue,});writer.insert(writer.createPositionBefore(mediaElement),linkElement);writer.move(writer.createRangeOn(mediaElement),writer.createPositionAt(linkElement,0),)},{priority:'high'},)}}
function editingDowncastMediaLink(){return(dispatcher)=>{dispatcher.on('attribute:linkHref:drupalMedia',(evt,data,conversionApi)=>{const{writer}=conversionApi;if(!conversionApi.consumable.consume(data.item,evt.name)){return}
const mediaContainer=conversionApi.mapper.toViewElement(data.item);const linkInMedia=Array.from(mediaContainer.getChildren()).find((child)=>child.name==='a',);if(linkInMedia){if(data.attributeNewValue){writer.setAttribute('href',data.attributeNewValue,linkInMedia)}else{writer.move(writer.createRangeIn(linkInMedia),writer.createPositionAt(mediaContainer,0),);writer.remove(linkInMedia)}}else{const mediaPreview=Array.from(mediaContainer.getChildren()).find((child)=>child.getAttribute('data-drupal-media-preview'),);const linkElement=writer.createContainerElement('a',{href:data.attributeNewValue,});writer.insert(writer.createPositionAt(mediaContainer,0),linkElement,);writer.move(writer.createRangeOn(mediaPreview),writer.createPositionAt(linkElement,0),)}},{priority:'high'},)}}
function downcastMediaLinkManualDecorator(decorator){return(dispatcher)=>{dispatcher.on(`attribute:${decorator.id}:drupalMedia`,(evt,data,conversionApi)=>{const mediaContainer=conversionApi.mapper.toViewElement(data.item);let mediaLink=Array.from(mediaContainer.getChildren()).find((child)=>child.name==='a',);if(!mediaLink&&mediaContainer.is('element','a')){mediaLink=mediaContainer}else{mediaLink=Array.from(mediaContainer.getAncestors()).find((ancestor)=>ancestor.name==='a',)}
if(!mediaLink){return}
for(const[key,val]of toMap(decorator.attributes)){conversionApi.writer.setAttribute(key,val,mediaLink)}
if(decorator.classes){conversionApi.writer.addClass(decorator.classes,mediaLink)}
for(const key in decorator.styles){if(Object.prototype.hasOwnProperty.call(decorator.styles,key)){conversionApi.writer.setStyle(key,decorator.styles[key],mediaLink,)}}},)}}
function upcastMediaLinkManualDecorator(editor,decorator){return(dispatcher)=>{dispatcher.on('element:a',(evt,data,conversionApi)=>{const viewLink=data.viewItem;const drupalMediaInLink=getFirstMedia(viewLink);if(!drupalMediaInLink){return}
const matcher=new Matcher(decorator._createPattern());const result=matcher.match(viewLink);if(!result){return}
if(!conversionApi.consumable.consume(viewLink,result.match)){return}
const modelElement=data.modelCursor.nodeBefore;conversionApi.writer.setAttribute(decorator.id,!0,modelElement)},{priority:'high'},)}}
export default class DrupalLinkMediaEditing extends Plugin{static get requires(){return['LinkEditing','DrupalMediaEditing']}
static get pluginName(){return'DrupalLinkMediaEditing'}
init(){const{editor}=this;editor.model.schema.extend('drupalMedia',{allowAttributes:['linkHref'],});editor.conversion.for('upcast').add(upcastMediaLink());editor.conversion.for('editingDowncast').add(editingDowncastMediaLink());editor.conversion.for('dataDowncast').add(dataDowncastMediaLink());this._enableManualDecorators();const linkCommand=editor.commands.get('link');if(linkCommand.automaticDecorators.length>0){throw new Error('The Drupal Media plugin is not compatible with automatic link decorators. To use Drupal Media, disable any plugins providing automatic link decorators.',)}}
_enableManualDecorators(){const editor=this.editor;const command=editor.commands.get('link');for(const decorator of command.manualDecorators){editor.model.schema.extend('drupalMedia',{allowAttributes:decorator.id,});editor.conversion.for('downcast').add(downcastMediaLinkManualDecorator(decorator));editor.conversion.for('upcast').add(upcastMediaLinkManualDecorator(editor,decorator))}}}