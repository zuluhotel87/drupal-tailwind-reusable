import{Plugin}from 'ckeditor5/src/core';import{Element,enablePlaceholder}from 'ckeditor5/src/engine';import{toWidgetEditable}from 'ckeditor5/src/widget';import{isDrupalMedia}from '../utils';import ToggleDrupalMediaCaptionCommand from './drupalmediacaptioncommand';function viewToModelCaption(editor){const converter=(evt,data,conversionApi)=>{const{viewItem}=data;const{writer,consumable}=conversionApi;if(!data.modelRange||!consumable.consume(viewItem,{attributes:['data-caption']})){return}
const caption=writer.createElement('caption');const drupalMedia=data.modelRange.start.nodeAfter;const viewFragment=editor.data.processor.toView(viewItem.getAttribute('data-caption'),);conversionApi.consumable.constructor.createFrom(viewFragment,conversionApi.consumable,);conversionApi.convertChildren(viewFragment,caption);writer.append(caption,drupalMedia)};return(dispatcher)=>{dispatcher.on('element:drupal-media',converter,{priority:'low'})}}
function mapModelPositionToView(editingView){return(evt,data)=>{const modelPosition=data.modelPosition;const parent=modelPosition.parent;if(!isDrupalMedia(parent)){return}
const viewElement=data.mapper.toViewElement(parent);data.viewPosition=editingView.createPositionAt(viewElement,modelPosition.offset+1,)}}
function modelCaptionToCaptionAttribute(editor){return(dispatcher)=>{dispatcher.on('insert:caption',(evt,data,conversionApi)=>{const{consumable,writer,mapper}=conversionApi;if(!isDrupalMedia(data.item.parent)||!consumable.consume(data.item,'insert')){return}
const range=editor.model.createRangeIn(data.item);const viewDocumentFragment=writer.createDocumentFragment();mapper.bindElements(data.item,viewDocumentFragment);for(const{item}of Array.from(range)){const itemData={item,range:editor.model.createRangeOn(item),};const eventName=`insert:${item.name || '$text'}`;editor.data.downcastDispatcher.fire(eventName,itemData,conversionApi);for(const key of item.getAttributeKeys()){Object.assign(itemData,{attributeKey:key,attributeOldValue:null,attributeNewValue:itemData.item.getAttribute(key),});editor.data.downcastDispatcher.fire(`attribute:${key}`,itemData,conversionApi,)}}
for(const child of writer.createRangeIn(viewDocumentFragment).getItems()){mapper.unbindViewElement(child)}
mapper.unbindViewElement(viewDocumentFragment);const captionText=editor.data.processor.toData(viewDocumentFragment);if(captionText){const imageViewElement=mapper.toViewElement(data.item.parent);writer.setAttribute('data-caption',captionText,imageViewElement)}})}}
export default class DrupalMediaCaptionEditing extends Plugin{static get requires(){return[]}
static get pluginName(){return'DrupalMediaCaptionEditing'}
constructor(editor){super(editor);this._savedCaptionsMap=new WeakMap()}
init(){const editor=this.editor;const schema=editor.model.schema;if(!schema.isRegistered('caption')){schema.register('caption',{allowIn:'drupalMedia',allowContentOf:'$block',isLimit:!0,})}else{schema.extend('caption',{allowIn:'drupalMedia',})}
editor.commands.add('toggleMediaCaption',new ToggleDrupalMediaCaptionCommand(editor),);this._setupConversion()}
_setupConversion(){const editor=this.editor;const view=editor.editing.view;editor.conversion.for('upcast').add(viewToModelCaption(editor));editor.conversion.for('editingDowncast').elementToElement({model:'caption',view:(modelElement,{writer})=>{if(!isDrupalMedia(modelElement.parent)){return null}
const figcaptionElement=writer.createEditableElement('figcaption');figcaptionElement.placeholder=Drupal.t('Enter media caption');enablePlaceholder({view,element:figcaptionElement,keepOnFocus:!0,});return toWidgetEditable(figcaptionElement,writer)},});editor.editing.mapper.on('modelToViewPosition',mapModelPositionToView(view),);editor.conversion.for('dataDowncast').add(modelCaptionToCaptionAttribute(editor))}
_getSavedCaption(drupalMediaModelElement){const jsonObject=this._savedCaptionsMap.get(drupalMediaModelElement);return jsonObject?Element.fromJSON(jsonObject):null}
_saveCaption(drupalMediaModelElement,caption){this._savedCaptionsMap.set(drupalMediaModelElement,caption.toJSON())}}