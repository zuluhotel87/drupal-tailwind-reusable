import{Plugin,icons}from 'ckeditor5/src/core';import{first}from 'ckeditor5/src/utils';import DrupalElementStyleCommand from './drupalelementstylecommand';import{groupNameToModelAttributeKey}from '../utils';function getStyleDefinitionByName(name,styles){for(const style of styles){if(style.name===name){return style}}}
function modelToViewStyleAttribute(styles){return(evt,data,conversionApi)=>{if(!conversionApi.consumable.consume(data.item,evt.name)){return}
const newStyle=getStyleDefinitionByName(data.attributeNewValue,styles);const oldStyle=getStyleDefinitionByName(data.attributeOldValue,styles);const viewElement=conversionApi.mapper.toViewElement(data.item);const viewWriter=conversionApi.writer;if(oldStyle){if(oldStyle.attributeName==='class'){viewWriter.removeClass(oldStyle.attributeValue,viewElement)}else{viewWriter.removeAttribute(oldStyle.attributeName,viewElement)}}
if(newStyle){if(newStyle.attributeName==='class'){viewWriter.addClass(newStyle.attributeValue,viewElement)}else if(!newStyle.isDefault){viewWriter.setAttribute(newStyle.attributeName,newStyle.attributeValue,viewElement,)}}}}
function viewToModelStyleAttribute(styles,modelAttribute){const nonDefaultStyles=styles.filter((style)=>!style.isDefault);return(evt,data,conversionApi)=>{if(!data.modelRange){return}
const viewElement=data.viewItem;const modelElement=first(data.modelRange.getItems());if(!modelElement){return}
if(!conversionApi.schema.checkAttribute(modelElement,modelAttribute)){return}
for(const style of nonDefaultStyles){if(style.attributeName==='class'){if(conversionApi.consumable.consume(viewElement,{classes:style.attributeValue,})){conversionApi.writer.setAttribute(modelAttribute,style.name,modelElement,)}}else if(conversionApi.consumable.consume(viewElement,{attributes:[style.attributeName],})){for(const style of nonDefaultStyles){if(style.attributeValue===viewElement.getAttribute(style.attributeName)){conversionApi.writer.setAttribute(modelAttribute,style.name,modelElement,)}}}}}}
export default class DrupalElementStyleEditing extends Plugin{init(){const{editor}=this;const stylesConfig=editor.config.get('drupalElementStyles');this.normalizedStyles={};Object.keys(stylesConfig).forEach((group)=>{this.normalizedStyles[group]=stylesConfig[group].map((style)=>{if(typeof style.icon==='string'){if(icons[style.icon]){style.icon=icons[style.icon]}}
if(style.name){style.name=`${style.name}`}
return style}).filter((style)=>{if(!style.isDefault&&(!style.attributeName||!style.attributeValue)){console.warn(`${style.attributeValue} drupalElementStyles options must include attributeName and attributeValue.`,);return!1}
if(!style.modelElements||!Array.isArray(style.modelElements)){console.warn('drupalElementStyles options must include an array of supported modelElements.',);return!1}
if(!style.name){console.warn('drupalElementStyles options must include a name.');return!1}
return!0})});this._setupConversion();editor.commands.add('drupalElementStyle',new DrupalElementStyleCommand(editor,this.normalizedStyles),)}
_setupConversion(){const{editor}=this;const{schema}=editor.model;const groupNamesArr=Object.keys(this.normalizedStyles);groupNamesArr.forEach((group)=>{const modelAttribute=groupNameToModelAttributeKey(group);const modelToViewConverter=modelToViewStyleAttribute(this.normalizedStyles[group],);const viewToModelConverter=viewToModelStyleAttribute(this.normalizedStyles[group],modelAttribute,);editor.editing.downcastDispatcher.on(`attribute:${modelAttribute}`,modelToViewConverter,);editor.data.downcastDispatcher.on(`attribute:${modelAttribute}`,modelToViewConverter,);const modelElements=[...new Set(this.normalizedStyles[group].map((style)=>{return style.modelElements}).flat(),),];modelElements.forEach((modelElement)=>{schema.extend(modelElement,{allowAttributes:modelAttribute,})});editor.data.upcastDispatcher.on('element',viewToModelConverter,{priority:'low'},)})}
static get pluginName(){return'DrupalElementStyleEditing'}}