import{Plugin,icons}from 'ckeditor5/src/core';import{ButtonView,ContextualBalloon,clickOutsideHandler,}from 'ckeditor5/src/ui';import{getClosestSelectedDrupalMediaWidget,isDrupalMedia}from '../utils';import{getBalloonPositionData,repositionContextualBalloon,}from '../ui/utils';import TextAlternativeFormView from './ui/textalternativeformview';export default class MediaImageTextAlternativeUi extends Plugin{static get requires(){return[ContextualBalloon]}
static get pluginName(){return'MediaImageTextAlternativeUi'}
init(){this._createButton();this._createForm()}
destroy(){super.destroy();this._form.destroy()}
_createButton(){const editor=this.editor;editor.ui.componentFactory.add('mediaImageTextAlternative',(locale)=>{const command=editor.commands.get('mediaImageTextAlternative');const view=new ButtonView(locale);view.set({label:Drupal.t('Override media image alternative text'),icon:icons.lowVision,tooltip:!0,});view.bind('isVisible').to(command,'isEnabled');this.listenTo(view,'execute',()=>{this._showForm()});return view})}
_createForm(){const editor=this.editor;const view=editor.editing.view;const viewDocument=view.document;this._balloon=this.editor.plugins.get('ContextualBalloon');this._form=new TextAlternativeFormView(editor.locale);this._form.render();this.listenTo(this._form,'submit',()=>{editor.execute('mediaImageTextAlternative',{newValue:this._form.decorativeToggle.isOn?'""':this._form.labeledInput.fieldView.element.value,});this._hideForm(!0)});this.listenTo(this._form,'cancel',()=>{this._hideForm(!0)});this._form.keystrokes.set('Esc',(data,cancel)=>{this._hideForm(!0);cancel()});this.listenTo(editor.ui,'update',()=>{if(!getClosestSelectedDrupalMediaWidget(viewDocument.selection)){this._hideForm(!0)}else if(this._isVisible){repositionContextualBalloon(editor)}});clickOutsideHandler({emitter:this._form,activator:()=>this._isVisible,contextElements:[this._balloon.view.element],callback:()=>this._hideForm(),})}
_showForm(){if(this._isVisible){return}
const editor=this.editor;const command=editor.commands.get('mediaImageTextAlternative');const decorativeToggle=this._form.decorativeToggle;const metadataRepository=editor.plugins.get('DrupalMediaMetadataRepository',);const labeledInput=this._form.labeledInput;this._form.disableCssTransitions();if(!this._isInBalloon){this._balloon.add({view:this._form,position:getBalloonPositionData(editor),})}
decorativeToggle.isOn=command.value==='""';labeledInput.fieldView.element.value=command.value||'';labeledInput.fieldView.value=labeledInput.fieldView.element.value;this._form.defaultAltText='';const modelElement=editor.model.document.selection.getSelectedElement();if(isDrupalMedia(modelElement)){metadataRepository.getMetadata(modelElement).then((metadata)=>{this._form.defaultAltText=metadata.imageSourceMetadata?metadata.imageSourceMetadata.alt:'';labeledInput.infoText=Drupal.t(`Leave blank to use the default alternative text: "${this._form.defaultAltText}".`,)}).catch((e)=>{console.warn(e.toString())})}
this._form.enableCssTransitions()}
_hideForm(focusEditable){if(!this._isInBalloon){return}
if(this._form.focusTracker.isFocused){this._form.saveButtonView.focus()}
this._balloon.remove(this._form);if(focusEditable){this.editor.editing.view.focus()}}
get _isVisible(){return this._balloon.visibleView===this._form}
get _isInBalloon(){return this._balloon.hasView(this._form)}}