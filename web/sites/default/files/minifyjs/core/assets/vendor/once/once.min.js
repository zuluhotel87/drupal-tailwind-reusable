/*! @drupal/once - v1.0.1 - 2021-06-12 */
const wsRE=/[\11\12\14\15\40]+/;const attrName='data-once';const doc=document;function attr(element,op,value){return element[`${op}Attribute`](attrName,value)}
function attrSelector(id){if(typeof id!=='string'){throw new TypeError('once ID must be a string')}
if(id===''||wsRE.test(id)){throw new RangeError('once ID must not be empty or contain spaces')}
return `[${attrName}~="${id}"]`}
function checkElement(itemToCheck){if(!(itemToCheck instanceof Element)){throw new TypeError('The element must be an instance of Element')}
return!0}
function getElements(selector,context=doc){let elements=selector;if(selector===null){elements=[]}else if(!selector){throw new TypeError('Selector must not be empty')}else if(typeof selector==='string'&&(context===doc||checkElement(context))){elements=context.querySelectorAll(selector)}else if(selector instanceof Element){elements=[selector]}
return Array.prototype.slice.call(elements)}
function filterAndModify(selector,elements,apply){return elements.filter((element)=>{const selected=checkElement(element)&&element.matches(selector);if(selected&&apply){apply(element)}
return selected})}
function updateAttribute(element,{add,remove}){const result=[];if(attr(element,'has')){attr(element,'get').trim().split(wsRE).forEach((item)=>{if(result.indexOf(item)<0&&item!==remove){result.push(item)}})}
if(add){result.push(add)}
const attribute=result.join(' ');attr(element,attribute===''?'remove':'set',attribute)}
function once(id,selector,context){return filterAndModify(`:not(${attrSelector(id)})`,getElements(selector,context),(element)=>updateAttribute(element,{add:id}),)}
once.remove=(id,selector,context)=>{return filterAndModify(attrSelector(id),getElements(selector,context),(element)=>updateAttribute(element,{remove:id}),)};once.filter=(id,selector,context)=>filterAndModify(attrSelector(id),getElements(selector,context));once.find=(id,context)=>getElements(!id?`[${attrName}]`:attrSelector(id),context);export default once