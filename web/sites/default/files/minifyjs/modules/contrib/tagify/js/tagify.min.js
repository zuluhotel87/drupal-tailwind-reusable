(function($,Drupal,drupalSettings,Sortable){Drupal.behaviors.tagifyAutocomplete={attach:function attach(context){const elements=$(once('tagify-widget','input.tagify-widget',context));elements.each(function(){const input=this;const{identifier}=input.dataset;const{cardinality}=input.dataset;function countSelectedTags(){const tagsElement=document.querySelector(`.${identifier}`);const tagElements=tagsElement.querySelectorAll('.tagify__tag');return tagElements.length}
function isTagLimitReached(){return cardinality>0&&countSelectedTags()>=cardinality}
function createLoadingTextMarkup(){const tagsElement=document.querySelector(`.${identifier}`);const loadingText=document.createElement('div');loadingText.className='tagify--loading-text hidden';loadingText.textContent='Loading...';tagsElement.appendChild(loadingText)}
function removeLoadingTextMarkup(){const tagsElement=document.querySelector(`.${identifier}`);if(tagsElement){const loadingText=tagsElement.querySelector('.tagify--loading-text',);if(loadingText){loadingText.remove()}}}
function validImgSrc(infoLabel){const pattern=new RegExp('^(https?:\\/\\/)?'+'((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|'+'((\\d{1,3}\\.){3}\\d{1,3}))'+'(\\:\\d+)?'+'(\\/[-a-z\\d%_.~+]*)*'+'(\\.(?:jpg|jpeg|png|gif|bmp|svg|webp))'+'(\\?[;&a-z\\d%_.~+=-]*)?'+'(\\#[-a-z\\d_]*)?$','i',);return!!pattern.test(infoLabel)}
function highlightMatchingLetters(inputTerm,searchTerm){const escapedSearchTerm=searchTerm.replace(/[.*+?^${}()|[\]\\]/g,'\\$&',);const regex=new RegExp(`(${escapedSearchTerm})`,'gi');if(!escapedSearchTerm){return inputTerm}
return inputTerm.replace(regex,'<strong>$1</strong>')}
function entityIdMarkup(entityId){return parseInt(input.dataset.showEntityId,10)&&entityId?`<div id="tagify__tag-items" class="tagify__tag_with-entity-id"><div class='tagify__tag__entity-id-wrap'><span class='tagify__tag-entity-id'>${entityId}</span></div></div>`:''}
function containsSVG(infoLabel){if(infoLabel&&typeof infoLabel==='string'){const tempDiv=document.createElement('div');tempDiv.innerHTML=infoLabel;const svgElements=tempDiv.querySelectorAll('svg');return svgElements.length>0}}
function containsImgTag(infoLabel){if(infoLabel&&typeof infoLabel==='string'){const tempDiv=document.createElement('div');tempDiv.innerHTML=infoLabel;const imgElements=tempDiv.querySelectorAll('img');return imgElements.length>0}
return!1}
function infoLabelMarkup(infoLabel){if(!infoLabel){return''}
return validImgSrc(infoLabel)||containsSVG(infoLabel)||containsImgTag(infoLabel)?`<div id='tagify__tag__info-label-wrap' class='tagify__tag__info-label-wrap'><div class='tagify__tag-info-label-image'>${
                validImgSrc(infoLabel)
                  ? `<img onerror="this.style.visibility='hidden'" src="${infoLabel}">`
                  : infoLabel
              }</div></div>`:infoLabel?`<div id='tagify__tag__info-label-wrap' class='tagify__tag__info-label-wrap'><span class='tagify__tag-info-label'>${infoLabel}</span></div>`:infoLabel}
function tagMarkup(tagLabel,tagInfoLabel,tagEntityId){return `<div id="tagify__tag-items">${tagEntityId}
            <span class="${
              tagEntityId
                ? 'tagify__tag-text-with-entity-id'
                : 'tagify__tag-text'
            }">${tagLabel}</span>${tagInfoLabel}</div>`}
function tagTemplate(tagData){const label=tagData.label??tagData.value;return `<tag title="${tagData.label}"
            contenteditable='false'
            spellcheck='false'
            tabIndex="-1"
            class="tagify__tag ${tagData.class ? tagData.class : ''}"
            ${this.getAttributes(tagData)}>
              <x id="tagify__tag-remove-button"
                title='Remove ${tagData.label}'
                class='tagify__tag__removeBtn'
                role='button'
                aria-label='remove ${tagData.label} tag'
                tabindex="0">
              </x>
              ${tagMarkup(
                label,
                infoLabelMarkup(tagData.info_label),
                entityIdMarkup(tagData.entity_id),
              )}
          </tag>`}
function suggestionItemTemplate(tagData){return!isTagLimitReached()?`<div ${this.getAttributes(
                tagData,
              )} class='tagify__dropdown__item ${
                tagData.class ? tagData.class : ''
              }' tabindex="0" role="option"><div class="tagify__dropdown__item-highlighted">
            ${highlightMatchingLetters(tagData.label, this.state.inputText)}
          </div>${infoLabelMarkup(tagData.info_label)}</div>`:''}
function suggestionFooterTemplate(){return isTagLimitReached()?`<footer
          data-selector='tagify-suggestions-footer'
          class="${this.settings.classNames.dropdownFooter}">
            <p>${drupalSettings.tagify.information_message.limit_tag} <strong>${cardinality}</strong></p>
         </footer>`:''}
const tagify=new Tagify(input,{dropdown:{enabled:parseInt(input.dataset.suggestionsDropdown,10),highlightFirst:!0,fuzzySearch:!!parseInt(input.dataset.matchOperator,10),maxItems:input.dataset.maxItems??Infinity,closeOnSelect:!0,searchKeys:['label','input'],mapValueTo:'label',},templates:{tag:tagTemplate,dropdownItem:suggestionItemTemplate,dropdownFooter:suggestionFooterTemplate,dropdownItemNoMatch:Drupal.debounce((data)=>{if(!isTagLimitReached()){return `
                  <div class='${tagify.settings.classNames.dropdownItem} tagify--dropdown-item-no-match'
                    value="noMatch"
                    tabindex="0"
                    role="option">
                    <p>${drupalSettings.tagify.information_message.no_matching_suggestions}</p>
                    <strong class="tagify--value">${data.value}</strong>
                  </div>`}
return''},250),},whitelist:[],placeholder:parseInt(input.dataset.placeholder,10),tagTextProp:'label',editTags:!1,maxTags:cardinality>0?cardinality:Infinity,pasteAsTags:!1,});let controller;tagify.settings.enforceWhitelist=isTagLimitReached()&&cardinality>1?!1:!$(this).hasClass('tagify--autocreate');tagify.settings.skipInvalid=isTagLimitReached()?!1:$(this).hasClass('tagify--autocreate');Sortable.create(tagify.DOM.scope,{draggable:`.${tagify.settings.classNames.tag}:not(tagify__input)`,forceFallback:!0,onEnd(){tagify.updateValueByDOMTags()},});function handleAutocomplete(value,selectedEntities){if(controller){controller.abort()}
controller=new AbortController();if(identifier){createLoadingTextMarkup()}
value!==''?tagify.loading(!0):tagify.loading(!1);const autocompleteUrl=new URL($(input).attr('data-autocomplete-url'),window.location.origin,);const operator=autocompleteUrl.search?'&':'?';fetch(`${$(input).attr('data-autocomplete-url')}${operator}q=${encodeURIComponent(value)}&selected=${selectedEntities}`,{signal:controller.signal},).then((res)=>res.json()).then(function(newWhitelist){const newWhitelistData=newWhitelist.map((current)=>({value:current.entity_id,entity_id:current.entity_id,info_label:current.info_label,label:current.label,editable:current.editable,input:tagify.state.inputText,...current.attributes,}));if(newWhitelistData){tagify.whitelist=newWhitelistData;if(identifier){removeLoadingTextMarkup()}}
tagify.loading(!1).dropdown.show(value)}).catch((error)=>{if(error instanceof Error&&error.name==='AbortError'){}else{console.error('Error fetching data:',error)}})}
const onInput=Drupal.debounce(function(e){const value=e.detail?.value??e.detail.pastedText??'';handleAutocomplete(value,tagify.value.map((item)=>item.entity_id),)},250);const onChange=Drupal.debounce(function(){if(isTagLimitReached()&&cardinality>1){tagify.settings.enforceWhitelist=!1;tagify.settings.skipInvalid=!1}});tagify.on('input paste cut',onInput);tagify.on('change',onChange);if(!tagify.settings.dropdown.enabled){const tagsElement=document.querySelector(`.${identifier}`);tagsElement.classList.add('tagify-select')}
function handleClickEvent(e){const isTagifyInput=e.target.classList.contains('tagify__input');const isDesiredContainer=e.target.closest(`.${identifier}`);if(isTagifyInput&&isDesiredContainer){handleAutocomplete('',tagify.value.map((item)=>item.entity_id),)}}
if(!tagify.settings.dropdown.enabled){document.addEventListener('click',handleClickEvent)}})},};Drupal.behaviors.tagifySelect={attach:function attach(context){const selectElements=$(once('tagify-select-widget','select.tagify-select-widget',context),);selectElements.each(function(){const select=this;const cardinality=parseInt(select.dataset.cardinality,10);const{identifier}=select.dataset;const{matchOperator}=select.dataset;const{matchLimit}=select.dataset;const{mode}=select.dataset;const{placeholder}=select.dataset;function countSelectedTags(){const tagsElement=document.querySelector(`.${identifier}`);const tagElements=tagsElement.querySelectorAll('.tagify__tag');return tagElements.length}
function isTagLimitReached(){return cardinality>0&&countSelectedTags()>=cardinality}
function highlightMatchingLetters(inputTerm,searchTerm){const escapedSearchTerm=searchTerm.replace(/[.*+?^${}()|[\]\\]/g,'\\$&',);const regex=new RegExp(`(${escapedSearchTerm})`,'gi');if(!escapedSearchTerm){return inputTerm}
return inputTerm.replace(regex,'<strong>$1</strong>')}
function tagTemplate(tagData){return `<tag title="${tagData.text}"
            contenteditable='false'
            spellcheck='false'
            tabIndex="-1"
            class="tagify__tag ${tagData.class ? tagData.class : ''}"
            ${this.getAttributes(tagData)}>
            <x
            id="tagify__tag-remove-button"
            class='tagify__tag__removeBtn'
            role='button'
            aria-label='remove tag'
            tabIndex="0">
            </x>
            <div id="tagify__tag-items">
            <span class='tagify__tag-text'>${tagData.text}</span>
            </div>
          </tag>`}
function dropdownItemTemplate(tagData){const{classNames}=this.settings;if(!isTagLimitReached()||mode){const dropdownItemClass=classNames.dropdownItem;const highlightedText=highlightMatchingLetters(tagData.text,this.state.inputText,);return `<div class='${dropdownItemClass}'
              value="${tagData.value}"
              tabindex="0"
              role="option">
              <div class="tagify__dropdown__item-highlighted">${highlightedText}</div>
            </div>`}
return''}
const options=[];const selected=[];[...this.options].forEach(function(option){if(!option.value||!option.text){return}
options.push({value:option.value,text:option.text});if(option.selected){selected.push({value:option.value,text:option.text})}});function suggestionFooterTemplate(){const{classNames}=this.settings;if(isTagLimitReached()&&!mode){return `<footer data-selector='tagify-suggestions-footer'
              class="${classNames.dropdownFooter}">
              <p>${drupalSettings.tagify_select.information_message.limit_tag} <strong>${cardinality}</strong></p>
            </footer>`}
return''}
const input=document.createElement('input');input.setAttribute('class',this.getAttribute('class'));if(this.hasAttribute('disabled')){input.setAttribute('disabled',this.getAttribute('disabled'))}
input.value=JSON.stringify(selected);this.before(input);const tagify=new Tagify(input,{mode,dropdown:{enabled:0,fuzzySearch:!!parseInt(matchOperator,10),maxItems:matchLimit==='0'?Infinity:matchLimit,highlightFirst:!0,searchKeys:['text'],mapValueTo:'text',},templates:{tag:tagTemplate,dropdownItem:dropdownItemTemplate,dropdownFooter:suggestionFooterTemplate,dropdownItemNoMatch:(data)=>!isTagLimitReached()?`<div class='${tagify.settings.classNames.dropdownItem} tagify--dropdown-item-no-match'
              value="noMatch"
              tabindex="0"
              role="option">
                <p>${drupalSettings.tagify_select.information_message.no_matching_suggestions} </p><strong class="tagify--value">${data.value}</strong>
              </div>`:'',},whitelist:options,enforceWhitelist:!0,editTags:!!mode,maxTags:cardinality>0?cardinality:Infinity,tagTextProp:'text',placeholder,});if(select.dataset.mode){const tagsElement=document.querySelector(`.${identifier}`);tagsElement.classList.remove('tagify--select')}
Sortable.create(tagify.DOM.scope,{draggable:`.${tagify.settings.classNames.tag}:not(tagify__input)`,forceFallback:!0,onEnd(){Array.from(tagify.DOM.scope.querySelectorAll(`.${tagify.settings.classNames.tag}`,),).forEach((tag)=>{const value=tag.getAttribute('value');const option=select.querySelector(`option[value="${value}"]`);if(option){select.removeChild(option);select.appendChild(option);option.selected=tag.classList.contains('tagify__tag')}})},});tagify.on('add',function(e){const{value}=e.detail.data;const option=select.querySelector(`option[value="${value}"]`);if(option){select.removeChild(option);select.appendChild(option);option.selected=!0}
select.dispatchEvent(new Event('change',{bubbles:!0}))});tagify.on('remove',function(e){const{value}=e.detail.data;const option=select.querySelector(`option[value="${value}"]`);if(option){option.selected=!1}
select.dispatchEvent(new Event('change',{bubbles:!0}))})})},}})(jQuery,Drupal,drupalSettings,Sortable)