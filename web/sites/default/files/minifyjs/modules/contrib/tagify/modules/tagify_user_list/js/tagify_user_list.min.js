(function($,Drupal,drupalSettings,Sortable){Drupal.behaviors.tagifyAutocompleteUserList={attach:function attach(){const elements=$(once('tagify-user-list-widget','input.tagify-user-list-widget'),);elements.each(function(){const input=this;const{identifier}=input.dataset;const{cardinality}=input.dataset;function countSelectedTags(){const tagsElement=document.querySelector(`.${identifier}`);const tagElements=tagsElement.querySelectorAll('.tagify__tag');return tagElements.length}
function isTagLimitReached(){return cardinality>0&&countSelectedTags()>=cardinality}
function createLoadingTextMarkup(){const tagsElement=document.querySelector(`.${identifier}`);const loadingText=document.createElement('div');loadingText.className='tagify--loading-text hidden';loadingText.textContent='Loading...';tagsElement.appendChild(loadingText)}
function removeLoadingTextMarkup(){const tagsElement=document.querySelector(`.${identifier}`);if(tagsElement){const loadingText=tagsElement.querySelector('.tagify--loading-text',);if(loadingText){loadingText.remove()}}}
function highlightMatchingLetters(inputTerm,searchTerm){const escapedSearchTerm=searchTerm.replace(/[.*+?^${}()|[\]\\]/g,'\\$&',);const regex=new RegExp(`(${escapedSearchTerm})`,'gi');if(!escapedSearchTerm){return inputTerm}
return inputTerm.replace(regex,'<strong>$1</strong>')}
function tagTemplate(tagData){const label=tagData.label??tagData.value;return `<tag title="${label}"
            contenteditable='false'
            spellcheck='false'
            tabIndex="-1"
            class="tagify__tag ${tagData.class ? tagData.class : ''}"
            ${this.getAttributes(tagData)}>
            <x id="tagify__tag-remove-button"
              title='Remove ${label}'
              class='tagify__tag__removeBtn'
              role='button'
              aria-label='remove ${label} tag'
              tabIndex="0">
            </x>
            <div id="tagify__tag-items">
              <div class='tagify__tag__avatar-wrap'>
                <img onerror="this.style.visibility='hidden'"
                  alt="${label}"
                  src="${tagData.avatar}"
                >
              </div>
              <span class='tagify__tag-text'>${label}</span>
            </div>
          </tag>`}
function suggestionItemTemplate(tagData){return!isTagLimitReached()?`<div ${this.getAttributes(
                tagData,
              )} class='tagify__dropdown__item tagify__dropdown__item-center ${
                tagData.class ? tagData.class : ''
              }' tabindex="0" role="option"> ${
                tagData.avatar
                  ? `<div class='tagify__dropdown__item__avatar-wrap'><img onerror="this.style.visibility='hidden'" src="${tagData.avatar}"></div>`
                  : ''
              }<div class="tagify__dropdown-user-info"><div class="tagify__dropdown-user-info-name">${highlightMatchingLetters(
                tagData.label,
                this.state.inputText,
              )}</div>${
                tagData.info_label
                  ? `<div class="tagify__dropdown-user-info-label"><span>${tagData.info_label}</span></div>`
                  : ''
              }</div></div>`:''}
function dropdownHeaderTemplate(suggestions){return!isTagLimitReached()?`<div
            class="tagify__dropdown__count">
              <span>${suggestions.length} members</span>
            </div>`:''}
function suggestionFooterTemplate(){return isTagLimitReached()?`<footer
          data-selector='tagify-suggestions-footer'
          class="${this.settings.classNames.dropdownFooter}">
            <p>${drupalSettings.tagify.information_message.limit_tag} <strong>${cardinality}</strong></p>
         </footer>`:''}
const tagify=new Tagify(input,{dropdown:{enabled:parseInt(input.dataset.suggestionsDropdown,10),highlightFirst:!0,fuzzySearch:!!parseInt(input.dataset.matchOperator,10),maxItems:input.dataset.maxItems??Infinity,closeOnSelect:!0,searchKeys:['label','input'],mapValueTo:'label',classname:'users-list',},templates:{tag:tagTemplate,dropdownItem:suggestionItemTemplate,dropdownHeader:dropdownHeaderTemplate,dropdownFooter:suggestionFooterTemplate,dropdownItemNoMatch:Drupal.debounce((data)=>{if(!isTagLimitReached()){return `
                  <div class='${tagify.settings.classNames.dropdownItem} tagify--dropdown-item-no-match'
                    value="noMatch"
                    tabindex="0"
                    role="option">
                    <p>${drupalSettings.tagify.information_message.no_matching_suggestions}</p>
                    <strong class="tagify--value">${data.value}</strong>
                  </div>`}
return''},250),},whitelist:[],placeholder:parseInt(input.dataset.placeholder,10),editTags:!1,maxTags:cardinality>0?cardinality:Infinity,});let controller;tagify.settings.enforceWhitelist=isTagLimitReached()&&cardinality>1?!1:!$(this).hasClass('tagify--autocreate');tagify.settings.skipInvalid=isTagLimitReached()?!1:$(this).hasClass('tagify--autocreate');Sortable.create(tagify.DOM.scope,{draggable:`.${tagify.settings.classNames.tag}:not(tagify__input)`,forceFallback:!0,onEnd(){tagify.updateValueByDOMTags()},});function handleAutocomplete(value){if(controller){controller.abort()}
controller=new AbortController();createLoadingTextMarkup();value!==''?tagify.loading(!0):tagify.loading(!1);const autocompleteUrl=new URL($(input).attr('data-autocomplete-url'),window.location.origin,);const operator=autocompleteUrl.search?'&':'?';fetch(`${$(input).attr('data-autocomplete-url')}${operator}q=${encodeURIComponent(value)}`,{signal:controller.signal},).then((res)=>res.json()).then(function(newWhitelist){const newWhitelistData=[];newWhitelist.forEach(function(current){newWhitelistData.push({value:current.entity_id,entity_id:current.entity_id,avatar:current.avatar,label:current.label,info_label:current.info_label,editable:current.editable,input:tagify.state.inputText,...current.attributes,})});if(newWhitelistData){tagify.whitelist=newWhitelistData;if(identifier){removeLoadingTextMarkup()}}
tagify.loading(!1).dropdown.show(value)}).catch((error)=>{if(error instanceof Error&&error.name==='AbortError'){}else{console.error('Error fetching data:',error)}})}
if(!tagify.settings.dropdown.enabled){const tagsElement=document.querySelector(`.${identifier}`);tagsElement.classList.add('tagify-select')}
const onInput=Drupal.debounce(function(e){const{value}=e.detail;handleAutocomplete(value,tagify.value.map((item)=>item.entity_id),)},250);const onChange=Drupal.debounce(function(){if(isTagLimitReached()&&cardinality>1){tagify.settings.enforceWhitelist=!1;tagify.settings.skipInvalid=!1}});tagify.on('input',onInput);tagify.on('change',onChange);function handleClickEvent(e){const containerClass=`.${identifier}`;const isTagifyInput=e.target.classList.contains('tagify__input');const isDesiredContainer=e.target.closest(containerClass);if(isTagifyInput&&isDesiredContainer){handleAutocomplete('',tagify.value.map((item)=>item.entity_id),)}}
if(!tagify.settings.dropdown.enabled){document.addEventListener('click',handleClickEvent)}})},};Drupal.behaviors.entityDetailsSummaries={attach:function attach(context){const $context=$(context);const element=$context.find('.node-form-author, .media-form-author');if(element.length){element.drupalSetSummary((authorContext)=>{const $authorContext=$(authorContext);const $authorInput=$authorContext.find('.field--name-uid input');const $createdInput=$authorContext.find('.field--name-created input',);let name=null;if($authorInput.length){const value=$authorInput.val();if(value){try{const parsed=JSON.parse(value);if(Array.isArray(parsed)&&parsed[0]?.label){name=parsed[0].label}}catch(e){console.error('Invalid JSON in $authorInput:',value,e)}}}
let date=null;if($createdInput.length){date=$createdInput.val()}
if(name&&date){return Drupal.t('By @name on @date',{'@name':name,'@date':date,})}
if(name){return Drupal.t('By @name',{'@name':name})}
if(date){return Drupal.t('Authored on @date',{'@date':date})}})}},}})(jQuery,Drupal,drupalSettings,Sortable)